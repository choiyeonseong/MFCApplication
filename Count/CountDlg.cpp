
// CountDlg.cpp : 구현 파일
//

#include "stdafx.h"
#include "Count.h"
#include "CountDlg.h"
#include "afxdialogex.h"
#include "MyThread.h"


#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// 응용 프로그램 정보에 사용되는 CAboutDlg 대화 상자입니다.

class CAboutDlg : public CDialogEx
{
public:
	CAboutDlg();

// 대화 상자 데이터입니다.
#ifdef AFX_DESIGN_TIME
	enum { IDD = IDD_ABOUTBOX };
#endif

	protected:
	virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV 지원입니다.

// 구현입니다.
protected:
	DECLARE_MESSAGE_MAP()
};

CAboutDlg::CAboutDlg() : CDialogEx(IDD_ABOUTBOX)
{
}

void CAboutDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
}

BEGIN_MESSAGE_MAP(CAboutDlg, CDialogEx)
END_MESSAGE_MAP()


// CCountDlg 대화 상자



CCountDlg::CCountDlg(CWnd* pParent /*=NULL*/)
	: CDialogEx(IDD_COUNT_DIALOG, pParent)
	, m_pMyThread(NULL)
{
	m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);
}

void CCountDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
}

BEGIN_MESSAGE_MAP(CCountDlg, CDialogEx)
	ON_WM_SYSCOMMAND()
	ON_WM_PAINT()
	ON_WM_QUERYDRAGICON()
	ON_BN_CLICKED(IDC_START_COUNT, &CCountDlg::OnClickedStartCount)
	ON_BN_CLICKED(IDC_START_PROGRESS, &CCountDlg::OnClickedStartProgress)
	ON_BN_CLICKED(IDC_CHECK1, &CCountDlg::OnClickedCheck1)
END_MESSAGE_MAP()


// CCountDlg 메시지 처리기

BOOL CCountDlg::OnInitDialog()
{
	CDialogEx::OnInitDialog();

	// 시스템 메뉴에 "정보..." 메뉴 항목을 추가합니다.

	// IDM_ABOUTBOX는 시스템 명령 범위에 있어야 합니다.
	ASSERT((IDM_ABOUTBOX & 0xFFF0) == IDM_ABOUTBOX);
	ASSERT(IDM_ABOUTBOX < 0xF000);

	CMenu* pSysMenu = GetSystemMenu(FALSE);
	if (pSysMenu != NULL)
	{
		BOOL bNameValid;
		CString strAboutMenu;
		bNameValid = strAboutMenu.LoadString(IDS_ABOUTBOX);
		ASSERT(bNameValid);
		if (!strAboutMenu.IsEmpty())
		{
			pSysMenu->AppendMenu(MF_SEPARATOR);
			pSysMenu->AppendMenu(MF_STRING, IDM_ABOUTBOX, strAboutMenu);
		}
	}

	// 이 대화 상자의 아이콘을 설정합니다.  응용 프로그램의 주 창이 대화 상자가 아닐 경우에는
	//  프레임워크가 이 작업을 자동으로 수행합니다.
	SetIcon(m_hIcon, TRUE);			// 큰 아이콘을 설정합니다.
	SetIcon(m_hIcon, FALSE);		// 작은 아이콘을 설정합니다.

	// TODO: 여기에 추가 초기화 작업을 추가합니다.

	return TRUE;  // 포커스를 컨트롤에 설정하지 않으면 TRUE를 반환합니다.
}

void CCountDlg::OnSysCommand(UINT nID, LPARAM lParam)
{
	if ((nID & 0xFFF0) == IDM_ABOUTBOX)
	{
		CAboutDlg dlgAbout;
		dlgAbout.DoModal();
	}
	else
	{
		CDialogEx::OnSysCommand(nID, lParam);
	}
}

// 대화 상자에 최소화 단추를 추가할 경우 아이콘을 그리려면
//  아래 코드가 필요합니다.  문서/뷰 모델을 사용하는 MFC 응용 프로그램의 경우에는
//  프레임워크에서 이 작업을 자동으로 수행합니다.

void CCountDlg::OnPaint()
{
	if (IsIconic())
	{
		CPaintDC dc(this); // 그리기를 위한 디바이스 컨텍스트입니다.

		SendMessage(WM_ICONERASEBKGND, reinterpret_cast<WPARAM>(dc.GetSafeHdc()), 0);

		// 클라이언트 사각형에서 아이콘을 가운데에 맞춥니다.
		int cxIcon = GetSystemMetrics(SM_CXICON);
		int cyIcon = GetSystemMetrics(SM_CYICON);
		CRect rect;
		GetClientRect(&rect);
		int x = (rect.Width() - cxIcon + 1) / 2;
		int y = (rect.Height() - cyIcon + 1) / 2;

		// 아이콘을 그립니다.
		dc.DrawIcon(x, y, m_hIcon);
	}
	else
	{
		CDialogEx::OnPaint();
	}
}

// 사용자가 최소화된 창을 끄는 동안에 커서가 표시되도록 시스템에서
//  이 함수를 호출합니다.
HCURSOR CCountDlg::OnQueryDragIcon()
{
	return static_cast<HCURSOR>(m_hIcon);
}


// [1에서 100000까지의 합] 버튼 누른 경우
void CCountDlg::OnClickedStartCount()
{
	// TODO: 여기에 컨트롤 알림 처리기 코드를 추가합니다.
	//// 1. single thread로 만들어져 다른 작업을 병행처리 할수 없다.
	//int nResult = 0;
	//for (int i = 0; i <= 100000; i++)	// 100000은 해야 오래걸림
	//{
	//	nResult += i;
	//	SetDlgItemInt(IDC_RESULT, nResult);
	//}

	// 2. 메인 스레드 + 작업 스레드 : multi thread program
	AfxBeginThread(MySumProc, this);	// 새로운 작업 스레드 생성
	GetDlgItem(IDC_START_COUNT)->EnableWindow(FALSE);
}


// 작업 스레드 함수 정의
UINT CCountDlg::MySumProc(void* lParam)
{
	int nResult = 0;
	CCountDlg* pDlg = (CCountDlg *)lParam;	// 형변환하여 사용해야 한다.
	for (int i = 0; i < 10000; i++)
	{
		nResult += i;
		pDlg->SetDlgItemInt(IDC_RESULT, nResult);
	}
	pDlg->GetDlgItem(IDC_START_COUNT)->EnableWindow(TRUE);
	return 0;
}

// [UI 스레드 시작] 버튼을 누른 경우
void CCountDlg::OnClickedStartProgress()
{
	// TODO: 여기에 컨트롤 알림 처리기 코드를 추가합니다.
	m_pMyThread = (CMyThread*)AfxBeginThread(RUNTIME_CLASS(CMyThread), THREAD_PRIORITY_LOWEST, 0, CREATE_SUSPENDED);	// UI 스레드 생성과 함께 스레드를 중단(suspended)
	m_pMyThread->SetOwner(this);	// 메인 스레드와 UI 스레드간 통신을 위해
	m_pMyThread->ResumeThread();	// 스레드를 재개한다
	GetDlgItem(IDC_START_PROGRESS)->EnableWindow(FALSE);
}

// [중단] 체크박스를 누른 경우
void CCountDlg::OnClickedCheck1()
{
	// TODO: 여기에 컨트롤 알림 처리기 코드를 추가합니다.
	CButton* pCheck = (CButton*)GetDlgItem(IDC_CHECK1);
	BOOL bSuspend = pCheck->GetCheck();
	if (bSuspend)	// 체크가 되었는지 판단
		m_pMyThread->SuspendThread();	// 스레드 중단
	else
		m_pMyThread->ResumeThread();	// 스레드 계속 진행
}
