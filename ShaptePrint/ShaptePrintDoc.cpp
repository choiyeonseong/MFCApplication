
// ShaptePrintDoc.cpp : CShaptePrintDoc 클래스의 구현
//

#include "stdafx.h"
// SHARED_HANDLERS는 미리 보기, 축소판 그림 및 검색 필터 처리기를 구현하는 ATL 프로젝트에서 정의할 수 있으며
// 해당 프로젝트와 문서 코드를 공유하도록 해 줍니다.
#ifndef SHARED_HANDLERS
#include "ShaptePrint.h"
#endif

#include "ShaptePrintDoc.h"

#include <propkey.h>

#ifdef _DEBUG
#define new DEBUG_NEW
#endif

// CShaptePrintDoc

IMPLEMENT_DYNCREATE(CShaptePrintDoc, CDocument)

BEGIN_MESSAGE_MAP(CShaptePrintDoc, CDocument)
END_MESSAGE_MAP()


// CShaptePrintDoc 생성/소멸

CShaptePrintDoc::CShaptePrintDoc()
{
	// TODO: 여기에 일회성 생성 코드를 추가합니다.

}

CShaptePrintDoc::~CShaptePrintDoc()
{
}

BOOL CShaptePrintDoc::OnNewDocument()
{
	if (!CDocument::OnNewDocument())
		return FALSE;

	// TODO: 여기에 재초기화 코드를 추가합니다.
	// SDI 문서는 이 문서를 다시 사용합니다.
	
	// 임의적으로 50개의 원을 만든다.
	srand((unsigned)time(NULL));
	int n1, n2, n3;
	m_ellipseArray.SetSize(50);	// 배열 크기 설정
	for (int i = 0; i < 50; i++)
	{
		n1 = rand() * 600 / RAND_MAX;
		n2 = rand() * 1000 / RAND_MAX;
		n3 = rand() * 50 / RAND_MAX;
		// 맵핑 모드 MM_LOENGLISH를 사용하기 위해 y값은 음수로 설정
		m_ellipseArray[i] = CRect(n1, -n2, n1 + n3, -(n2 + n3));
	}
	return TRUE;
}




// CShaptePrintDoc serialization

void CShaptePrintDoc::Serialize(CArchive& ar)
{
	if (ar.IsStoring())
	{
		// TODO: 여기에 저장 코드를 추가합니다.
		m_ellipseArray.Serialize(ar);	// 배열 요소를 로드하고 저장한다.
	}
	else
	{
		// TODO: 여기에 로딩 코드를 추가합니다.
	}
}

#ifdef SHARED_HANDLERS

// 축소판 그림을 지원합니다.
void CShaptePrintDoc::OnDrawThumbnail(CDC& dc, LPRECT lprcBounds)
{
	// 문서의 데이터를 그리려면 이 코드를 수정하십시오.
	dc.FillSolidRect(lprcBounds, RGB(255, 255, 255));

	CString strText = _T("TODO: implement thumbnail drawing here");
	LOGFONT lf;

	CFont* pDefaultGUIFont = CFont::FromHandle((HFONT) GetStockObject(DEFAULT_GUI_FONT));
	pDefaultGUIFont->GetLogFont(&lf);
	lf.lfHeight = 36;

	CFont fontDraw;
	fontDraw.CreateFontIndirect(&lf);

	CFont* pOldFont = dc.SelectObject(&fontDraw);
	dc.DrawText(strText, lprcBounds, DT_CENTER | DT_WORDBREAK);
	dc.SelectObject(pOldFont);
}

// 검색 처리기를 지원합니다.
void CShaptePrintDoc::InitializeSearchContent()
{
	CString strSearchContent;
	// 문서의 데이터에서 검색 콘텐츠를 설정합니다.
	// 콘텐츠 부분은 ";"로 구분되어야 합니다.

	// 예: strSearchContent = _T("point;rectangle;circle;ole object;");
	SetSearchContent(strSearchContent);
}

void CShaptePrintDoc::SetSearchContent(const CString& value)
{
	if (value.IsEmpty())
	{
		RemoveChunk(PKEY_Search_Contents.fmtid, PKEY_Search_Contents.pid);
	}
	else
	{
		CMFCFilterChunkValueImpl *pChunk = NULL;
		ATLTRY(pChunk = new CMFCFilterChunkValueImpl);
		if (pChunk != NULL)
		{
			pChunk->SetTextValue(PKEY_Search_Contents, value, CHUNK_TEXT);
			SetChunkValue(pChunk);
		}
	}
}

#endif // SHARED_HANDLERS

// CShaptePrintDoc 진단

#ifdef _DEBUG
void CShaptePrintDoc::AssertValid() const
{
	CDocument::AssertValid();
}

void CShaptePrintDoc::Dump(CDumpContext& dc) const
{
	CDocument::Dump(dc);
}
#endif //_DEBUG


// CShaptePrintDoc 명령
